{"version":3,"sources":["reportWebVitals.js","Components/OrganizationTable/OrganizationTable.js","Components/Header/Header.js","Components/AddNewOrganizationModal/AddNewOrganizationModal.js","Components/AddNewModal/AddNewModal.js","Components/ContableTable/ContactTable.js","Components/EditContactModal/EditContactModal.js","Components/ContactBook.js","Components/EditOrganizationModal/EditOrganizationModal.js","Components/OrganizationBook.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","OrganizationTable","props","organizations","map","organization","i","orgName","email","Button","color","size","className","onClick","setDisplayContactTable","setOrgId","orgId","setOrganizationName","console","log","setOrganizationContact","toggleEditOrgModal","previousState","alert","axios","delete","response","data","setIsOrgUpdated","Table","Header","Navbar","dark","expand","sticky","NavbarBrand","href","Nav","navbar","NavItem","NavLink","toggleNewOrganizationModal","toggleNewContactModal","AddNewOrganizationModal","Modal","isOpen","newOrganizationModal","toggle","ModalHeader","ModalBody","FormGroup","Label","for","Input","id","value","organizationName","onChange","e","target","organizationContact","ModalFooter","addOrganization","AddNewModal","orgOption","elem","label","useState","isOrgIdSelected","toggleOrgSelected","newContactModal","contactName","setContactName","name","options","searchable","contactNumber","setContactNumber","addContact","ContactTable","contacts","contact","pid","peopleName","contactNo","setContactId","toggleEditContactModal","setIsUpdated","EditContactModal","editContactModal","placeholder","updateContact","ContactBook","setContacts","displayContactTable","contactId","isUpdated","nodataFound","setNodataFound","useEffect","getContact","url","get","length","Fragment","newContactData","post","setOrganizations","EditOrganizationModal","editOrgModal","updateOrganization","OrganizationBook","prop","isOrgUpdated","getOrganizationDetails","organizationData","people","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5e31067.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport { Table, Button } from 'reactstrap'\r\nimport axios from 'axios'\r\n\r\nconst OrganizationTable = (props) => {\r\n  //   console.log(props.organizations)\r\n\r\n  // Iterating each organization and displaying it in the form of table.\r\n  let organizations = props.organizations.map((organization, i) => {\r\n    // console.log('Organization id' + Organization.id)\r\n    // console.log(organization.organizationName)\r\n\r\n    return (\r\n      <tr key={organization.orgId}>\r\n        <td> {organization.orgName}</td>\r\n        <td> {organization.email}</td>\r\n        <td>\r\n          <Button\r\n            color='primary'\r\n            size='sm'\r\n            className='mr-2'\r\n            onClick={() => {\r\n              props.setDisplayContactTable(false)\r\n              props.setOrgId(organization.orgId)\r\n              props.setOrganizationName(organization.orgName)\r\n              console.log(organization.orgName)\r\n            }}\r\n          >\r\n            View Contacts\r\n          </Button>\r\n          <Button\r\n            color='success'\r\n            size='sm'\r\n            className='mr-2'\r\n            onClick={() => {\r\n              props.setOrgId(organization.orgId)\r\n              props.setOrganizationName(organization.orgName)\r\n              props.setOrganizationContact(organization.email)\r\n              props.toggleEditOrgModal((previousState) => {\r\n                // console.log(previousState)\r\n                // console.log(organizations.orgName)\r\n                return !previousState\r\n              })\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Button\r\n            color='danger'\r\n            size='sm'\r\n            onClick={() => {\r\n              console.log('delete org ' + organization.orgId)\r\n              alert('All Contacts under this organiztion will be deleted!')\r\n              //   props.setDeleteOrgID(organization.orgId)\r\n              //   props.deleteOrg()\r\n\r\n              axios\r\n                .delete(\r\n                  'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/deletePeopledByOrg/' +\r\n                    organization.orgId\r\n                )\r\n                .then((response) => {\r\n                  if (response.data) {\r\n                    axios\r\n                      .delete(\r\n                        'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/deleteOrg/' +\r\n                          organization.orgId\r\n                      )\r\n                      .then((response) => {\r\n                        props.setIsOrgUpdated(true)\r\n                        alert('Organization deleted!')\r\n                      })\r\n\r\n                    // setIsOrgUpdated(true)\r\n                  }\r\n                })\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Table className='text-center mt-4'>\r\n      <thead>\r\n        <tr>\r\n          <th>Organization Name</th>\r\n          <th>Contact</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{organizations}</tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default OrganizationTable\r\n","import { Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap'\r\n\r\nimport React from 'react'\r\n\r\nconst Header = (props) => {\r\n  // Header holds the option to add org, add contact and can reach home page\r\n  return (\r\n    <Navbar color='dark' dark expand='md' sticky='top'>\r\n      <NavbarBrand href='/'>Contact Book</NavbarBrand>\r\n\r\n      <Nav className='mr-auto' navbar>\r\n        <NavItem className='ml-5'>\r\n          <NavLink href='/'>Home</NavLink>\r\n        </NavItem>\r\n\r\n        <NavItem>\r\n          <NavLink\r\n            onClick={() => {\r\n              props.toggleNewOrganizationModal((previousState) => {\r\n                console.log(previousState)\r\n                props.setOrganizationName('')\r\n                props.setOrganizationContact('')\r\n                return !previousState\r\n              })\r\n            }}\r\n          >\r\n            Add Organization\r\n          </NavLink>\r\n        </NavItem>\r\n\r\n        <NavItem className='cursor-normalizer'>\r\n          <NavLink\r\n            onClick={() => {\r\n              props.toggleNewContactModal((previousState) => {\r\n                console.log(previousState)\r\n                return !previousState\r\n              })\r\n            }}\r\n          >\r\n            Add Contact\r\n          </NavLink>\r\n        </NavItem>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  FormFeedback,\r\n  FormText,\r\n} from 'reactstrap'\r\n\r\nconst AddNewOrganizationModal = (props) => {\r\n  // This modal will be trigger whenever user tries to add a new org\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={props.newOrganizationModal}\r\n      toggle={() => {\r\n        props.toggleNewOrganizationModal(false)\r\n      }}\r\n    >\r\n      <ModalHeader\r\n        toggle={() => {\r\n          props.toggleNewOrganizationModal(false)\r\n        }}\r\n      >\r\n        Add a New Organization\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label for='OrganizationName'>Organization Name</Label>\r\n          <Input\r\n            id='OrganizationName'\r\n            value={props.organizationName}\r\n            onChange={(e) => {\r\n              props.setOrganizationName(e.target.value)\r\n            }}\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Label for='OrgContactNumber'>Organization E-Mail</Label>\r\n          <Input\r\n            id='OrgContactNumber'\r\n            value={props.organizationContact}\r\n            onChange={(e) => {\r\n              props.setOrganizationContact(e.target.value)\r\n            }}\r\n          />\r\n        </FormGroup>\r\n      </ModalBody>\r\n\r\n      <ModalFooter>\r\n        <Button\r\n          color='primary'\r\n          onClick={() => {\r\n            // Validating for not null scenario while creating Org\r\n            if (\r\n              props.organizationName === '' ||\r\n              props.organizationContact === ''\r\n            ) {\r\n              alert('Please fill all the fields!')\r\n            } else {\r\n              console.log('Clicked')\r\n              props.addOrganization()\r\n            }\r\n          }}\r\n        >\r\n          Add Organization\r\n        </Button>\r\n\r\n        <Button\r\n          color='secondary'\r\n          onClick={() => {\r\n            props.toggleNewOrganizationModal(false)\r\n            props.setOrganizationName('')\r\n            props.setOrganizationContact('')\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default AddNewOrganizationModal\r\n","import React, { useState } from 'react'\r\nimport {\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\n\r\nconst AddNewModal = (props) => {\r\n  // This modal will be trigger whenever user tries to add a new Contact\r\n\r\n  const orgOption = props.organizations.map((elem) => ({\r\n    value: elem.orgId,\r\n    label: elem.orgName,\r\n  }))\r\n\r\n  const [isOrgIdSelected, toggleOrgSelected] = useState(false)\r\n  return (\r\n    <Modal\r\n      isOpen={props.newContactModal}\r\n      toggle={() => {\r\n        props.toggleNewContactModal(false)\r\n      }}\r\n    >\r\n      <ModalHeader\r\n        toggle={() => {\r\n          props.toggleNewContactModal(false)\r\n        }}\r\n      >\r\n        Add a New Contact\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label for='Name'>People Name</Label>\r\n          <Input\r\n            id='Name'\r\n            value={props.contactName}\r\n            onChange={(e) => {\r\n              props.setContactName(e.target.value)\r\n            }}\r\n          ></Input>\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Label for='exampleSelect'>Select Organization</Label>\r\n          <Select\r\n            name='org'\r\n            options={orgOption}\r\n            searchable={false}\r\n            onChange={(e) => {\r\n              console.log('e' + e.value)\r\n              props.setOrgId(e.value)\r\n            }}\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Label for='ContactNumber'>People Contact Number</Label>\r\n          <Input\r\n            id='ContactNumber'\r\n            value={props.contactNumber}\r\n            onChange={(e) => {\r\n              props.setContactNumber(e.target.value)\r\n              toggleOrgSelected(true)\r\n            }}\r\n          />\r\n        </FormGroup>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          color='primary'\r\n          onClick={() => {\r\n            // console.log(props.contactName)\r\n            // console.log(isOrgIdSelected)\r\n            // console.log(props.contactNumber)\r\n            if (\r\n              props.contactName === '' ||\r\n              !isOrgIdSelected ||\r\n              props.contactNumber === ''\r\n            ) {\r\n              alert('Please fill all the fields!')\r\n            } else {\r\n              console.log('Clicked')\r\n              props.addContact()\r\n              props.setContactName('')\r\n              props.setOrganizationName('')\r\n              props.setContactNumber('')\r\n            }\r\n          }}\r\n        >\r\n          Add Contact\r\n        </Button>\r\n\r\n        <Button\r\n          color='secondary'\r\n          onClick={() => {\r\n            props.toggleNewContactModal(false)\r\n            props.setContactName('')\r\n            props.setOrganizationName('')\r\n            props.setContactNumber('')\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default AddNewModal\r\n","import React from 'react'\r\n// import {Table} from 'reactstrap'\r\nimport { Table, Button } from 'reactstrap'\r\n\r\nimport axios from 'axios'\r\n\r\nconst ContactTable = (props) => {\r\n  let contacts = props.contacts.map((contact) => {\r\n    // let cId = contact.pid\r\n    // will iterate all the contacts and display it in the form of table\r\n    console.log('contact id' + contact.pid)\r\n    return (\r\n      <tr key={contact.pid}>\r\n        <td> {contact.peopleName}</td>\r\n        <td> {contact.contactNo}</td>\r\n        <td> {contact.organization.orgName}</td>\r\n        <td>\r\n          <Button\r\n            color='success'\r\n            size='sm'\r\n            className='mr-2'\r\n            onClick={() => {\r\n              props.setContactName(contact.peopleName)\r\n              props.setContactNumber(contact.contactNo)\r\n              props.setOrganizationName(contact.organization.orgName)\r\n              props.setContactId(contact.pid)\r\n              props.toggleEditContactModal((previousState) => {\r\n                console.log(previousState)\r\n                return !previousState\r\n              })\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n\r\n          <Button\r\n            color='danger'\r\n            size='sm'\r\n            // onClick={this.deleteContact.bind(this, contact.id)}\r\n            onClick={() => {\r\n              console.log('delete org ' + contact.pid)\r\n              axios\r\n                .delete(\r\n                  'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/deletePeople/' +\r\n                    contact.pid\r\n                )\r\n                .then((response) => {\r\n                  if (response.data) {\r\n                    // props.setIsOrgUpdated(true)\r\n                    props.setIsUpdated(true)\r\n                    alert('People Contact deleted!')\r\n                    // setIsOrgUpdated(true)\r\n                  }\r\n                })\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Table className='text-center'>\r\n      <thead>\r\n        <tr>\r\n          <th>People Name</th>\r\n          <th>People Phone Number</th>\r\n          <th>Organization</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{contacts}</tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default ContactTable\r\n","import React from 'react'\r\nimport {\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\n\r\nconst EditContactModal = (props) => {\r\n  // This modal will be trigger whenever user choose edit contact in contact page.\r\n  // On submit of this form a function call will be made to updatecontact.\r\n  const orgOption = props.organizations.map((elem) => ({\r\n    value: elem.orgId,\r\n    label: elem.orgName,\r\n  }))\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={props.editContactModal}\r\n      toggle={() => {\r\n        props.toggleEditContactModal(false)\r\n      }}\r\n    >\r\n      <ModalHeader\r\n        toggle={() => {\r\n          props.toggleEditContactModal(false)\r\n        }}\r\n      >\r\n        Edit a New Contact\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <FormGroup>\r\n          <Label for='Name'>Name</Label>\r\n          <Input\r\n            id='Name'\r\n            value={props.contactName}\r\n            onChange={(e) => {\r\n              props.setContactName(e.target.value)\r\n            }}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for='exampleSelect'>Select Organization</Label>\r\n          <Select\r\n            // styles={customStyles}\r\n            name='vehicle'\r\n            options={orgOption}\r\n            placeholder={props.organizationName}\r\n            // value={this.state.vehicle}\r\n            // onChange={this.handleChange}\r\n            searchable={false}\r\n            onChange={(e) => {\r\n              console.log('e' + e.value)\r\n              props.setOrgId(e.value)\r\n            }}\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Label for='ContactNumber'>Contact Number</Label>\r\n          <Input\r\n            id='ContactNumber'\r\n            value={props.contactNumber}\r\n            onChange={(e) => {\r\n              props.setContactNumber(e.target.value)\r\n            }}\r\n          />\r\n        </FormGroup>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          color='primary'\r\n          onClick={() => {\r\n            console.log('Clicked')\r\n            if (props.contactName === '' || props.contactNumber === '') {\r\n              alert('Please fill all the fields!')\r\n            } else {\r\n              console.log('Clicked')\r\n              props.updateContact()\r\n            }\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n\r\n        <Button\r\n          color='secondary'\r\n          onClick={() => {\r\n            props.toggleEditContactModal(false)\r\n            // props.setContactName('')\r\n            // props.setOrganizationName('')\r\n            // props.setContactNumber('')\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditContactModal\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport ContactTable from './ContableTable/ContactTable'\r\nimport EditContactModal from './EditContactModal/EditContactModal'\r\n\r\nconst ContactBook = (props) => {\r\n  // Variable here are created to get from user via modal form\r\n  const [contactName, setContactName] = useState('')\r\n  const [organizationName, setOrganizationName] = useState('')\r\n  const [contactNumber, setContactNumber] = useState('')\r\n\r\n  // Contacts will holds all contacts of an org\r\n  const [contacts, setContacts] = useState([])\r\n  const [displayContactTable, setDisplayContactTable] = useState(true)\r\n  const [contactId, setContactId] = useState('')\r\n  const [isUpdated, setIsUpdated] = useState(false)\r\n  const [editContactModal, toggleEditContactModal] = useState(false)\r\n  const [orgId, setOrgId] = useState('')\r\n  const [nodataFound, setNodataFound] = useState(false)\r\n\r\n  // When this page is loaded API call is made to fetch contact details based on org\r\n  useEffect(() => {\r\n    getContact()\r\n  }, [])\r\n\r\n  // Having this useeffect to update the contact details page\r\n  useEffect(() => {\r\n    if (isUpdated) {\r\n      getContact()\r\n      setIsUpdated(false)\r\n    }\r\n  }, [isUpdated])\r\n\r\n  useEffect(() => {\r\n    if (!props.newContactModal && !props.displayContactTable) {\r\n      getContact()\r\n      // setIsUpdated(false)\r\n    }\r\n  }, [props.newContactModal])\r\n\r\n  // API call to get contact details based on the org selected. Passing org id in props from\r\n  // paren component\r\n  const getContact = () => {\r\n    let id = props.orgId\r\n    setOrgId(id)\r\n    const url =\r\n      'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/getPeopleByOrgId/' +\r\n      id\r\n    axios.get(url).then((response) => {\r\n      if (response.data.length === 0) {\r\n        setNodataFound(true)\r\n      } else {\r\n        setNodataFound(false)\r\n      }\r\n      console.log(response.data)\r\n\r\n      setContacts(response.data)\r\n    })\r\n  }\r\n\r\n  // Api call to update the contact details based on person id.\r\n  const updateContact = () => {\r\n    const newContactData = {\r\n      pid: contactId,\r\n      peopleName: contactName,\r\n      contactNo: contactNumber,\r\n      organization: {\r\n        orgId: orgId,\r\n      },\r\n    }\r\n\r\n    axios\r\n      .post(\r\n        'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/peopleUpdate',\r\n        newContactData\r\n      )\r\n      .then((response) => {\r\n        if (response.data.pid) {\r\n          alert('Data Added SuccessFully')\r\n          setIsUpdated(true)\r\n          toggleEditContactModal(false)\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* This will trigger the edit contact modal form whenever it is toggled */}\r\n      <EditContactModal\r\n        editContactModal={editContactModal}\r\n        toggleEditContactModal={toggleEditContactModal}\r\n        contactName={contactName}\r\n        setContactName={setContactName}\r\n        organizationName={organizationName}\r\n        setOrganizationName={setOrganizationName}\r\n        contactNumber={contactNumber}\r\n        setContactNumber={setContactNumber}\r\n        updateContact={updateContact}\r\n        organizations={props.organizations}\r\n        setOrganizations={props.setOrganizations}\r\n        setOrgId={setOrgId}\r\n      />\r\n      {/* if there is no data inside org it will display no contacts. \r\n      So handling it with teneray operation */}\r\n\r\n      {displayContactTable ? (\r\n        !nodataFound ? (\r\n          <ContactTable\r\n            className=' mt-4'\r\n            contacts={contacts}\r\n            setContactId={setContactId}\r\n            setDisplayContactTable={setDisplayContactTable}\r\n            toggleEditContactModal={toggleEditContactModal}\r\n            contactName={contactName}\r\n            setContactName={setContactName}\r\n            organizationName={organizationName}\r\n            setOrganizationName={setOrganizationName}\r\n            contactNumber={contactNumber}\r\n            setContactNumber={setContactNumber}\r\n            orgId={orgId}\r\n            setOrgId={setOrgId}\r\n            setIsUpdated={setIsUpdated}\r\n          />\r\n        ) : (\r\n          <h4>No Data Available</h4>\r\n        )\r\n      ) : null}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ContactBook\r\n","import React from 'react'\r\nimport {\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n} from 'reactstrap'\r\n\r\nconst EditOrganizationModal = (props) => {\r\n  // This modal will be trigger whenever user choose edit org in org page.\r\n  // On submit of this form a function call will be made to updateOrg.\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        isOpen={props.editOrgModal}\r\n        toggle={() => {\r\n          props.toggleEditOrgModal(false)\r\n        }}\r\n      >\r\n        <ModalHeader\r\n          toggle={() => {\r\n            props.toggleEditOrgModal(false)\r\n          }}\r\n        >\r\n          Edit Organization\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <FormGroup>\r\n            <Label for='OrganizationName'>Organization Name</Label>\r\n\r\n            <Input\r\n              id='OrganizationName'\r\n              value={props.organizationName}\r\n              onChange={(e) => {\r\n                props.setOrganizationName(e.target.value)\r\n              }}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for='OrgContactNumber'>Organization Contact Email</Label>\r\n            <Input\r\n              id='OrgContactNumber'\r\n              value={props.organizationContact}\r\n              onChange={(e) => {\r\n                props.setOrganizationContact(e.target.value)\r\n              }}\r\n            />\r\n          </FormGroup>\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <Button\r\n            color='primary'\r\n            onClick={() => {\r\n              console.log('Clicked')\r\n              // Validating not null scenario while Updating Org details\r\n              if (\r\n                props.organizationName === '' ||\r\n                props.organizationContact === ''\r\n              ) {\r\n                alert('Please fill all the fields!')\r\n              } else {\r\n                console.log('Clicked')\r\n                props.updateOrganization()\r\n              }\r\n            }}\r\n          >\r\n            Update\r\n          </Button>\r\n\r\n          <Button\r\n            color='secondary'\r\n            onClick={() => {\r\n              props.toggleEditOrgModal(false)\r\n              //   props.setOrganizationName('')\r\n              //   props.setOrganizationContactNumber('')\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default EditOrganizationModal\r\n","import React, { useState, useEffect } from 'react'\r\nimport OrganizationTable from './OrganizationTable/OrganizationTable'\r\nimport axios from 'axios'\r\nimport Header from './Header/Header'\r\nimport AddNewOrganizationModal from './AddNewOrganizationModal/AddNewOrganizationModal'\r\nimport AddNewModal from './AddNewModal/AddNewModal'\r\nimport ContactBook from './ContactBook'\r\nimport EditOrganizationModal from './EditOrganizationModal/EditOrganizationModal'\r\n\r\nconst OrganizationBook = (prop) => {\r\n  // Having two variables and methods to toggle the modal form for both organization and contact\r\n  const [newContactModal, toggleNewContactModal] = useState(false)\r\n  const [newOrganizationModal, toggleNewOrganizationModal] = useState(false)\r\n\r\n  // Variables and methods to get the organization details\r\n  const [organizationName, setOrganizationName] = useState('')\r\n  const [organizationContact, setOrganizationContact] = useState('')\r\n\r\n  //will hit get organization api call and assign all values to the variable\r\n  //variable to refresh the org list when a new org is add or edited\r\n  const [organizations, setOrganizations] = useState([])\r\n  const [isOrgUpdated, setIsOrgUpdated] = useState(false)\r\n\r\n  const [orgId, setOrgId] = useState('')\r\n  //   const [deleteOrgID, setDeleteOrgID] = useState('')\r\n\r\n  // Variable for contact page\r\n  const [contactName, setContactName] = useState('')\r\n  const [contactNumber, setContactNumber] = useState('')\r\n  const [displayContactTable, setDisplayContactTable] = useState(true)\r\n  const [editOrgModal, toggleEditOrgModal] = useState(false)\r\n\r\n  useEffect(() => {\r\n    getOrganizationDetails()\r\n  }, []) //loads when List of Org details when page refereshed\r\n\r\n  // This methods helps to refresh when an org is add or edited\r\n  useEffect(() => {\r\n    if (isOrgUpdated) {\r\n      getOrganizationDetails()\r\n      setIsOrgUpdated(false)\r\n    }\r\n  }, [isOrgUpdated])\r\n\r\n  //API call to fetch org details in Home page\r\n  const getOrganizationDetails = () => {\r\n    axios\r\n      .get(\r\n        'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/getAllOrganization'\r\n      )\r\n      .then((response) => {\r\n        setOrganizations(response.data)\r\n        console.log(response.data)\r\n      })\r\n  }\r\n\r\n  // API call to add org details.\r\n  const addOrganization = () => {\r\n    console.log('orgName' + organizationName)\r\n    const organizationData = {\r\n      orgName: organizationName,\r\n      email: organizationContact,\r\n    }\r\n    axios\r\n      .post(\r\n        'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/addOrganization',\r\n        organizationData\r\n      )\r\n      .then((response) => {\r\n        if (response.data.orgId) {\r\n          alert('Contact Created!!')\r\n          setIsOrgUpdated(true)\r\n        }\r\n        setOrganizationName('')\r\n        setOrganizationContact('')\r\n        toggleNewOrganizationModal(false)\r\n      })\r\n  }\r\n\r\n  // API call to add contacts\r\n  const addContact = () => {\r\n    const newContactData = {\r\n      people: {\r\n        peopleName: contactName,\r\n        contactNo: contactNumber,\r\n        organization: {\r\n          orgId: orgId,\r\n        },\r\n      },\r\n    }\r\n\r\n    axios\r\n      .post(\r\n        'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/addPeople',\r\n        newContactData\r\n      )\r\n      .then((response) => {\r\n        if (response.data.pid) {\r\n          alert('Contact Created!')\r\n          toggleNewContactModal(false)\r\n        }\r\n      })\r\n  }\r\n\r\n  // API call to update org\r\n  const updateOrganization = () => {\r\n    const requestBody = {\r\n      orgId: orgId,\r\n      orgName: organizationName,\r\n      email: organizationContact,\r\n    }\r\n    axios\r\n      .post(\r\n        'http://springbootawscontactbook-env.eba-iipbxdjb.us-east-2.elasticbeanstalk.com/orgUpdate',\r\n        requestBody\r\n      )\r\n      .then((response) => {\r\n        if (response.data.orgId) {\r\n          alert('Contact Updated!')\r\n          toggleEditOrgModal(false)\r\n          setIsOrgUpdated(true)\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* Header Fragment contains the Add org and Add contact options. */}\r\n      <Header\r\n        toggleNewOrganizationModal={toggleNewOrganizationModal}\r\n        toggleNewContactModal={toggleNewContactModal}\r\n        setOrganizationName={setOrganizationName}\r\n        setOrganizationContact={setOrganizationContact}\r\n      />\r\n\r\n      {/*this will get trigger when we clicked add org in header*/}\r\n      <AddNewOrganizationModal\r\n        newOrganizationModal={newOrganizationModal}\r\n        toggleNewOrganizationModal={toggleNewOrganizationModal}\r\n        organizationName={organizationName}\r\n        setOrganizationName={setOrganizationName}\r\n        organizationContact={organizationContact}\r\n        setOrganizationContact={setOrganizationContact}\r\n        addOrganization={addOrganization}\r\n      />\r\n\r\n      {/*this will get trigger when we clicked add contact in header*/}\r\n      <AddNewModal\r\n        newContactModal={newContactModal}\r\n        toggleNewContactModal={toggleNewContactModal}\r\n        contactName={contactName}\r\n        setContactName={setContactName}\r\n        organizationName={organizationName}\r\n        setOrganizationName={setOrganizationName}\r\n        contactNumber={contactNumber}\r\n        setContactNumber={setContactNumber}\r\n        addContact={addContact}\r\n        organizations={organizations}\r\n        setOrganizations={setOrganizations}\r\n        setOrgId={setOrgId}\r\n      />\r\n\r\n      {/*this will get trigger when we clicked add Edit in header*/}\r\n      <EditOrganizationModal\r\n        editOrgModal={editOrgModal}\r\n        toggleEditOrgModal={toggleEditOrgModal}\r\n        organizationName={organizationName}\r\n        setOrganizationName={setOrganizationName}\r\n        organizationContact={organizationContact}\r\n        setOrganizationContact={setOrganizationContact}\r\n        // addOrganization={addOrganization}\r\n        updateOrganization={updateOrganization}\r\n      />\r\n\r\n      {/* I have created this application as a single page application\r\n    so having a contion here which will display org details and contact details\r\n    based on the condition dispplayContactTable. This display contact table will be set \r\n    from contactbook */}\r\n\r\n      {displayContactTable ? (\r\n        <>\r\n          <h4 className='mt-3'>\r\n            <center>Organization Details</center>\r\n          </h4>\r\n          <OrganizationTable\r\n            organizationContact={organizationContact}\r\n            setOrganizationContact={setOrganizationContact}\r\n            organizations={organizations}\r\n            setOrganizations={setOrganizations}\r\n            organizationName={organizationName}\r\n            setOrganizationName={setOrganizationName}\r\n            //   organizationContactCount={organizationContactCount}\r\n            //   setorganizationContactCount={setorganizationContactCount}\r\n            // deleteOrg={deleteOrg}\r\n            // setDeleteOrgID={setDeleteOrgID}\r\n            orgId={orgId}\r\n            setOrgId={setOrgId}\r\n            setIsOrgUpdated={setIsOrgUpdated}\r\n            displayContactTable={displayContactTable}\r\n            setDisplayContactTable={setDisplayContactTable}\r\n            toggleEditOrgModal={toggleEditOrgModal}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4 className='mt-3 text-center'>\r\n            {organizationName} People Contacts\r\n          </h4>\r\n          <ContactBook\r\n            orgId={orgId}\r\n            organizations={organizations}\r\n            setOrganizations={setOrganizations}\r\n            newContactModal={newContactModal}\r\n            displayContactTable={displayContactTable}\r\n          />\r\n        </>\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default OrganizationBook\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\n\nimport reportWebVitals from './reportWebVitals'\n\nimport OrganizationBook from './Components/OrganizationBook'\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* Organization book is the parent of all the component  */}\n    <OrganizationBook />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}